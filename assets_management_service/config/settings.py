"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
import sys
from corsheaders.defaults import default_headers, default_methods
from utils.environment_configs import EnvironmentConfigs

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure--f%(_u)*2u_clq-1=^y@h7f1bf821chfs!q5ilkdyp%3+=me%h'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

# Application definition
INSTALLED_APPS = [

    # Default
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Packages
    'rest_framework',
    'django_filters',
    'corsheaders',

    # Apps
    'assets',
    'purchase',
    'inventory',

]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'

# Database
if EnvironmentConfigs.db == 'PostgreSQL':
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': EnvironmentConfigs.dbName,
            'USER': EnvironmentConfigs.dbUser,
            'PASSWORD': EnvironmentConfigs.dbPassword,
            'HOST': EnvironmentConfigs.dbHost,
            'PORT': EnvironmentConfigs.dbPort,
        }

    }
elif EnvironmentConfigs.db == 'MySQL':
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': EnvironmentConfigs.dbName,
            'USER': EnvironmentConfigs.dbUser,
            'PASSWORD': EnvironmentConfigs.dbPassword,
            'HOST': EnvironmentConfigs.dbHost,
            'PORT': EnvironmentConfigs.dbPort,
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

STATIC_URL = 'static/'

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# CORS Setting
CORS_ALLOW_ALL_ORIGINS = False
CORS_ALLOWED_ORIGINS = [
    "https://learn.techademycampus.com",
    "https://uat.techademycampus.com",
    "https://learn.techademycampus.com",
    "https://stage.techademycampus.com",
    "https://dev.techademycampus.com",
    "http://localhost:3000",
]

CORS_ALLOW_HEADERS = list(default_headers) + []
CORS_ALLOW_METHODS = list(default_methods) + []

# Logger Configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        # 'console': {
        #     'format': '%(asctime)s %(levelname)-8s %(name)-30s %(filename)-30s %(funcName)-30s %(lineno)-4d %(message)s',
        # },
        'file': {
            'format': '%(asctime)s %(levelname)-8s %(filename)-30s %(funcName)-30s %(lineno)-4d %(message)s',
        }
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'stream': sys.stdout,
            # 'formatter': 'console'
        },
        'service_handler_file': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'maxBytes': 1024 * 1024 * 10,
            'backupCount': 20,
            'formatter': 'file',
            'filename': 'service.log'
        },
        'trace_handler_file': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'maxBytes': 1024 * 1024 * 10,
            'backupCount': 20,
            'formatter': 'file',
            'filename': 'trace.log'
        }
    },
    'loggers': {
        'course_logger': {
            'level': os.getenv('DJANGO_LOG_LEVEL', 'DEBUG'),
            'handlers': [
                # 'console',
                'service_handler_file'
            ]
        },
        'trace_logger': {
            'level': os.getenv('DJANGO_LOG_LEVEL', 'DEBUG'),
            'handlers': [
                # 'console',
                'trace_handler_file'
            ]
        }
    }
}
